name: CCT-Web Application Deployment
on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      branch:
        required: true
        type: string
      deploy_application:
        required: true
        default: true
        type: boolean
    secrets:
      VERCEL_TOKEN:
        description: Vercel token to interact with the API
        required: true
      VERCEL_ORG_ID:
        description: Vercel organization id
        required: true
      VERCEL_PROJECT_ID:
        description: Vercel project id
        required: true

jobs:
  app-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          npm install --global pnpm

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token="${{ secrets.VERCEL_TOKEN }}"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Cache modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: pnpm-cache-${{ hashFiles('**/pnpm-lock.yaml')}}

      - name: Run pnpm install
        run: pnpm install

      - name: Configure environment variables
        run: |
          if [ -d ./config/environments ];then

             env_file="./config/environments/.env.${{ inputs.environment_name }}"

             if [ -f "$env_file" ];then
               cp "./config/environments/.env.${{ inputs.environment_name }}" .env.production
             else
                if [ "${{ inputs.environment_name}}" == "preview" ];then
                  echo "Preview environment detected, using beta configuration"
                  cp -v ./config/environments/.env.beta .env.production
                else
                  echo "The configuration file .env.${{ inputs.environment_name }} doesn't exists"
                  exit 1
                fi
             fi
          else
             echo "Configuration folder doesn't exist can't continue building the app"
             exit 1
          fi

      - name: Confirm environment configuration file
        run: |
          if [ -f .env.production ];then
             if [ -s .env.production ];then
               echo "File is not empty"
             else
               exit 1
             fi
          else
            echo "The configuration for production doesn't exist, can't proceed with build process"
          fi

      - name: Build Project Artifacts
        run: vercel build --token="${{ secrets.VERCEL_TOKEN }}"

      - name: Deploy Application to Vercel Domain
        id: vercel_deployment
        if: ${{ inputs.deploy_application }}
        run: |
          url="$(vercel deploy --prebuilt --force --token=${{ secrets.VERCEL_TOKEN }})"
          echo "vercel_url=$url" >> $GITHUB_OUTPUT
          vercel alias --token=${{ secrets.VERCEL_TOKEN }} set "$url" "${{ inputs.environment_name }}-commerce-web.vercel.app" --scope=${{ secrets.VERCEL_ORG_ID }}
